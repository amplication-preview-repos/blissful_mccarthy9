/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ForecastLine as PrismaForecastLine,
  Product as PrismaProduct,
} from "@prisma/client";

export class ForecastLineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ForecastLineCountArgs, "select">
  ): Promise<number> {
    return this.prisma.forecastLine.count(args);
  }

  async forecastLines(
    args: Prisma.ForecastLineFindManyArgs
  ): Promise<PrismaForecastLine[]> {
    return this.prisma.forecastLine.findMany(args);
  }
  async forecastLine(
    args: Prisma.ForecastLineFindUniqueArgs
  ): Promise<PrismaForecastLine | null> {
    return this.prisma.forecastLine.findUnique(args);
  }
  async createForecastLine(
    args: Prisma.ForecastLineCreateArgs
  ): Promise<PrismaForecastLine> {
    return this.prisma.forecastLine.create(args);
  }
  async updateForecastLine(
    args: Prisma.ForecastLineUpdateArgs
  ): Promise<PrismaForecastLine> {
    return this.prisma.forecastLine.update(args);
  }
  async deleteForecastLine(
    args: Prisma.ForecastLineDeleteArgs
  ): Promise<PrismaForecastLine> {
    return this.prisma.forecastLine.delete(args);
  }

  async getProduct(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.forecastLine
      .findUnique({
        where: { id: parentId },
      })
      .product();
  }
}
