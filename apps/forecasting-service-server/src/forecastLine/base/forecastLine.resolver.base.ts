/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ForecastLine } from "./ForecastLine";
import { ForecastLineCountArgs } from "./ForecastLineCountArgs";
import { ForecastLineFindManyArgs } from "./ForecastLineFindManyArgs";
import { ForecastLineFindUniqueArgs } from "./ForecastLineFindUniqueArgs";
import { CreateForecastLineArgs } from "./CreateForecastLineArgs";
import { UpdateForecastLineArgs } from "./UpdateForecastLineArgs";
import { DeleteForecastLineArgs } from "./DeleteForecastLineArgs";
import { Product } from "../../product/base/Product";
import { ForecastLineService } from "../forecastLine.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ForecastLine)
export class ForecastLineResolverBase {
  constructor(
    protected readonly service: ForecastLineService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "read",
    possession: "any",
  })
  async _forecastLinesMeta(
    @graphql.Args() args: ForecastLineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ForecastLine])
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "read",
    possession: "any",
  })
  async forecastLines(
    @graphql.Args() args: ForecastLineFindManyArgs
  ): Promise<ForecastLine[]> {
    return this.service.forecastLines(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ForecastLine, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "read",
    possession: "own",
  })
  async forecastLine(
    @graphql.Args() args: ForecastLineFindUniqueArgs
  ): Promise<ForecastLine | null> {
    const result = await this.service.forecastLine(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ForecastLine)
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "create",
    possession: "any",
  })
  async createForecastLine(
    @graphql.Args() args: CreateForecastLineArgs
  ): Promise<ForecastLine> {
    return await this.service.createForecastLine({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ForecastLine)
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "update",
    possession: "any",
  })
  async updateForecastLine(
    @graphql.Args() args: UpdateForecastLineArgs
  ): Promise<ForecastLine | null> {
    try {
      return await this.service.updateForecastLine({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ForecastLine)
  @nestAccessControl.UseRoles({
    resource: "ForecastLine",
    action: "delete",
    possession: "any",
  })
  async deleteForecastLine(
    @graphql.Args() args: DeleteForecastLineArgs
  ): Promise<ForecastLine | null> {
    try {
      return await this.service.deleteForecastLine(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: ForecastLine
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
